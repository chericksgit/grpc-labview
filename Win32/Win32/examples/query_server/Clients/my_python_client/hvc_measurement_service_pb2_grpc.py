# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import hvc_measurement_service_pb2 as hvc__measurement__service__pb2


class MeasurementServiceStub(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Invoke = channel.unary_unary(
                '/measurementservice.MeasurementService/Invoke',
                request_serializer=hvc__measurement__service__pb2.InvokeRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.InvokeResponse.FromString,
                )
        self.Query = channel.unary_unary(
                '/measurementservice.MeasurementService/Query',
                request_serializer=hvc__measurement__service__pb2.QueryRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.QueryResponse.FromString,
                )
        self.Register = channel.unary_stream(
                '/measurementservice.MeasurementService/Register',
                request_serializer=hvc__measurement__service__pb2.RegistrationRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.ServerEvent.FromString,
                )
        self.OpenDMMSession = channel.unary_unary(
                '/measurementservice.MeasurementService/OpenDMMSession',
                request_serializer=hvc__measurement__service__pb2.DMMOpenSessionRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.DMMOpenSessionResponse.FromString,
                )
        self.ConfigureDMM = channel.unary_unary(
                '/measurementservice.MeasurementService/ConfigureDMM',
                request_serializer=hvc__measurement__service__pb2.DMMConfigRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.DMMConfigResponse.FromString,
                )
        self.PerformDMMVoltageMeasurement = channel.unary_unary(
                '/measurementservice.MeasurementService/PerformDMMVoltageMeasurement',
                request_serializer=hvc__measurement__service__pb2.DMMVoltageRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.DMMVoltageData.FromString,
                )
        self.CloseDMMSession = channel.unary_unary(
                '/measurementservice.MeasurementService/CloseDMMSession',
                request_serializer=hvc__measurement__service__pb2.DMMCloseSessionRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.DMMCloseSessionResponse.FromString,
                )
        self.SelfCalibrateDMM = channel.unary_unary(
                '/measurementservice.MeasurementService/SelfCalibrateDMM',
                request_serializer=hvc__measurement__service__pb2.DMMSelfCalRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.DMMSelfCalResponse.FromString,
                )
        self.ResetDMM = channel.unary_unary(
                '/measurementservice.MeasurementService/ResetDMM',
                request_serializer=hvc__measurement__service__pb2.DMMResetRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.DMMResetResponse.FromString,
                )
        self.OpenSMUSession = channel.unary_unary(
                '/measurementservice.MeasurementService/OpenSMUSession',
                request_serializer=hvc__measurement__service__pb2.SMUOpenSessionRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.SMUOpenSessionResponse.FromString,
                )
        self.ConfigureSMU = channel.unary_unary(
                '/measurementservice.MeasurementService/ConfigureSMU',
                request_serializer=hvc__measurement__service__pb2.SMUConfigRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.SMUConfigResponse.FromString,
                )
        self.EnableSMUOutput = channel.unary_unary(
                '/measurementservice.MeasurementService/EnableSMUOutput',
                request_serializer=hvc__measurement__service__pb2.SMUEnableRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.SMUEnableResponse.FromString,
                )
        self.DisableSMUOutput = channel.unary_unary(
                '/measurementservice.MeasurementService/DisableSMUOutput',
                request_serializer=hvc__measurement__service__pb2.SMUDisableRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.SMUDisableResponse.FromString,
                )
        self.PerformSMUCurrentMeasurement = channel.unary_unary(
                '/measurementservice.MeasurementService/PerformSMUCurrentMeasurement',
                request_serializer=hvc__measurement__service__pb2.SMUCurrentRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.SMUCurrentData.FromString,
                )
        self.CloseSMUSession = channel.unary_unary(
                '/measurementservice.MeasurementService/CloseSMUSession',
                request_serializer=hvc__measurement__service__pb2.SMUCloseSessionRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.SMUCloseSessionResponse.FromString,
                )
        self.SelfCalibrateSMU = channel.unary_unary(
                '/measurementservice.MeasurementService/SelfCalibrateSMU',
                request_serializer=hvc__measurement__service__pb2.SMUSelfCalRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.SMUSelfCalResponse.FromString,
                )
        self.ResetSMU = channel.unary_unary(
                '/measurementservice.MeasurementService/ResetSMU',
                request_serializer=hvc__measurement__service__pb2.SMUResetRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.SMUResetResponse.FromString,
                )
        self.OpenNI2576MUXSession = channel.unary_unary(
                '/measurementservice.MeasurementService/OpenNI2576MUXSession',
                request_serializer=hvc__measurement__service__pb2.NI2576MUXOpenSessionRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.NI2576MUXOpenSessionResponse.FromString,
                )
        self.CloseNI2576MUXChannel = channel.unary_unary(
                '/measurementservice.MeasurementService/CloseNI2576MUXChannel',
                request_serializer=hvc__measurement__service__pb2.NI2576MUXCloseChannelRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.NI2576MUXCloseChannelResponse.FromString,
                )
        self.OpenNI2576MUXChannel = channel.unary_unary(
                '/measurementservice.MeasurementService/OpenNI2576MUXChannel',
                request_serializer=hvc__measurement__service__pb2.NI2576MUXOpenChannelRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.NI2576MUXOpenChannelResponse.FromString,
                )
        self.DisconnectAllNI2576MUXChannels = channel.unary_unary(
                '/measurementservice.MeasurementService/DisconnectAllNI2576MUXChannels',
                request_serializer=hvc__measurement__service__pb2.NI2576MUXDisconnectAllRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.NI2576MUXDisconnectAllResponse.FromString,
                )
        self.CloseNI2576MUXSession = channel.unary_unary(
                '/measurementservice.MeasurementService/CloseNI2576MUXSession',
                request_serializer=hvc__measurement__service__pb2.NI2576MUXCloseSessionRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.NI2576MUXCloseSessionResponse.FromString,
                )
        self.ResetNI2576MUX = channel.unary_unary(
                '/measurementservice.MeasurementService/ResetNI2576MUX',
                request_serializer=hvc__measurement__service__pb2.NI2576MUXResetRequest.SerializeToString,
                response_deserializer=hvc__measurement__service__pb2.NI2576MUXResetResponse.FromString,
                )


class MeasurementServiceServicer(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    def Invoke(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenDMMSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDMM(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformDMMVoltageMeasurement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseDMMSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelfCalibrateDMM(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetDMM(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenSMUSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSMU(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableSMUOutput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableSMUOutput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformSMUCurrentMeasurement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseSMUSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelfCalibrateSMU(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetSMU(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenNI2576MUXSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseNI2576MUXChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenNI2576MUXChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisconnectAllNI2576MUXChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseNI2576MUXSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetNI2576MUX(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeasurementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Invoke': grpc.unary_unary_rpc_method_handler(
                    servicer.Invoke,
                    request_deserializer=hvc__measurement__service__pb2.InvokeRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.InvokeResponse.SerializeToString,
            ),
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=hvc__measurement__service__pb2.QueryRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.QueryResponse.SerializeToString,
            ),
            'Register': grpc.unary_stream_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=hvc__measurement__service__pb2.RegistrationRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.ServerEvent.SerializeToString,
            ),
            'OpenDMMSession': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenDMMSession,
                    request_deserializer=hvc__measurement__service__pb2.DMMOpenSessionRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.DMMOpenSessionResponse.SerializeToString,
            ),
            'ConfigureDMM': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDMM,
                    request_deserializer=hvc__measurement__service__pb2.DMMConfigRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.DMMConfigResponse.SerializeToString,
            ),
            'PerformDMMVoltageMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformDMMVoltageMeasurement,
                    request_deserializer=hvc__measurement__service__pb2.DMMVoltageRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.DMMVoltageData.SerializeToString,
            ),
            'CloseDMMSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseDMMSession,
                    request_deserializer=hvc__measurement__service__pb2.DMMCloseSessionRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.DMMCloseSessionResponse.SerializeToString,
            ),
            'SelfCalibrateDMM': grpc.unary_unary_rpc_method_handler(
                    servicer.SelfCalibrateDMM,
                    request_deserializer=hvc__measurement__service__pb2.DMMSelfCalRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.DMMSelfCalResponse.SerializeToString,
            ),
            'ResetDMM': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetDMM,
                    request_deserializer=hvc__measurement__service__pb2.DMMResetRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.DMMResetResponse.SerializeToString,
            ),
            'OpenSMUSession': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenSMUSession,
                    request_deserializer=hvc__measurement__service__pb2.SMUOpenSessionRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.SMUOpenSessionResponse.SerializeToString,
            ),
            'ConfigureSMU': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSMU,
                    request_deserializer=hvc__measurement__service__pb2.SMUConfigRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.SMUConfigResponse.SerializeToString,
            ),
            'EnableSMUOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableSMUOutput,
                    request_deserializer=hvc__measurement__service__pb2.SMUEnableRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.SMUEnableResponse.SerializeToString,
            ),
            'DisableSMUOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableSMUOutput,
                    request_deserializer=hvc__measurement__service__pb2.SMUDisableRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.SMUDisableResponse.SerializeToString,
            ),
            'PerformSMUCurrentMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformSMUCurrentMeasurement,
                    request_deserializer=hvc__measurement__service__pb2.SMUCurrentRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.SMUCurrentData.SerializeToString,
            ),
            'CloseSMUSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseSMUSession,
                    request_deserializer=hvc__measurement__service__pb2.SMUCloseSessionRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.SMUCloseSessionResponse.SerializeToString,
            ),
            'SelfCalibrateSMU': grpc.unary_unary_rpc_method_handler(
                    servicer.SelfCalibrateSMU,
                    request_deserializer=hvc__measurement__service__pb2.SMUSelfCalRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.SMUSelfCalResponse.SerializeToString,
            ),
            'ResetSMU': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetSMU,
                    request_deserializer=hvc__measurement__service__pb2.SMUResetRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.SMUResetResponse.SerializeToString,
            ),
            'OpenNI2576MUXSession': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenNI2576MUXSession,
                    request_deserializer=hvc__measurement__service__pb2.NI2576MUXOpenSessionRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.NI2576MUXOpenSessionResponse.SerializeToString,
            ),
            'CloseNI2576MUXChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseNI2576MUXChannel,
                    request_deserializer=hvc__measurement__service__pb2.NI2576MUXCloseChannelRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.NI2576MUXCloseChannelResponse.SerializeToString,
            ),
            'OpenNI2576MUXChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenNI2576MUXChannel,
                    request_deserializer=hvc__measurement__service__pb2.NI2576MUXOpenChannelRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.NI2576MUXOpenChannelResponse.SerializeToString,
            ),
            'DisconnectAllNI2576MUXChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.DisconnectAllNI2576MUXChannels,
                    request_deserializer=hvc__measurement__service__pb2.NI2576MUXDisconnectAllRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.NI2576MUXDisconnectAllResponse.SerializeToString,
            ),
            'CloseNI2576MUXSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseNI2576MUXSession,
                    request_deserializer=hvc__measurement__service__pb2.NI2576MUXCloseSessionRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.NI2576MUXCloseSessionResponse.SerializeToString,
            ),
            'ResetNI2576MUX': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetNI2576MUX,
                    request_deserializer=hvc__measurement__service__pb2.NI2576MUXResetRequest.FromString,
                    response_serializer=hvc__measurement__service__pb2.NI2576MUXResetResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'measurementservice.MeasurementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MeasurementService(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    @staticmethod
    def Invoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/Invoke',
            hvc__measurement__service__pb2.InvokeRequest.SerializeToString,
            hvc__measurement__service__pb2.InvokeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/Query',
            hvc__measurement__service__pb2.QueryRequest.SerializeToString,
            hvc__measurement__service__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/measurementservice.MeasurementService/Register',
            hvc__measurement__service__pb2.RegistrationRequest.SerializeToString,
            hvc__measurement__service__pb2.ServerEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenDMMSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/OpenDMMSession',
            hvc__measurement__service__pb2.DMMOpenSessionRequest.SerializeToString,
            hvc__measurement__service__pb2.DMMOpenSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDMM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/ConfigureDMM',
            hvc__measurement__service__pb2.DMMConfigRequest.SerializeToString,
            hvc__measurement__service__pb2.DMMConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformDMMVoltageMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/PerformDMMVoltageMeasurement',
            hvc__measurement__service__pb2.DMMVoltageRequest.SerializeToString,
            hvc__measurement__service__pb2.DMMVoltageData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseDMMSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/CloseDMMSession',
            hvc__measurement__service__pb2.DMMCloseSessionRequest.SerializeToString,
            hvc__measurement__service__pb2.DMMCloseSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelfCalibrateDMM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/SelfCalibrateDMM',
            hvc__measurement__service__pb2.DMMSelfCalRequest.SerializeToString,
            hvc__measurement__service__pb2.DMMSelfCalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetDMM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/ResetDMM',
            hvc__measurement__service__pb2.DMMResetRequest.SerializeToString,
            hvc__measurement__service__pb2.DMMResetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenSMUSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/OpenSMUSession',
            hvc__measurement__service__pb2.SMUOpenSessionRequest.SerializeToString,
            hvc__measurement__service__pb2.SMUOpenSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSMU(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/ConfigureSMU',
            hvc__measurement__service__pb2.SMUConfigRequest.SerializeToString,
            hvc__measurement__service__pb2.SMUConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnableSMUOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/EnableSMUOutput',
            hvc__measurement__service__pb2.SMUEnableRequest.SerializeToString,
            hvc__measurement__service__pb2.SMUEnableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableSMUOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/DisableSMUOutput',
            hvc__measurement__service__pb2.SMUDisableRequest.SerializeToString,
            hvc__measurement__service__pb2.SMUDisableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformSMUCurrentMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/PerformSMUCurrentMeasurement',
            hvc__measurement__service__pb2.SMUCurrentRequest.SerializeToString,
            hvc__measurement__service__pb2.SMUCurrentData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseSMUSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/CloseSMUSession',
            hvc__measurement__service__pb2.SMUCloseSessionRequest.SerializeToString,
            hvc__measurement__service__pb2.SMUCloseSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelfCalibrateSMU(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/SelfCalibrateSMU',
            hvc__measurement__service__pb2.SMUSelfCalRequest.SerializeToString,
            hvc__measurement__service__pb2.SMUSelfCalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetSMU(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/ResetSMU',
            hvc__measurement__service__pb2.SMUResetRequest.SerializeToString,
            hvc__measurement__service__pb2.SMUResetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenNI2576MUXSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/OpenNI2576MUXSession',
            hvc__measurement__service__pb2.NI2576MUXOpenSessionRequest.SerializeToString,
            hvc__measurement__service__pb2.NI2576MUXOpenSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseNI2576MUXChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/CloseNI2576MUXChannel',
            hvc__measurement__service__pb2.NI2576MUXCloseChannelRequest.SerializeToString,
            hvc__measurement__service__pb2.NI2576MUXCloseChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenNI2576MUXChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/OpenNI2576MUXChannel',
            hvc__measurement__service__pb2.NI2576MUXOpenChannelRequest.SerializeToString,
            hvc__measurement__service__pb2.NI2576MUXOpenChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisconnectAllNI2576MUXChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/DisconnectAllNI2576MUXChannels',
            hvc__measurement__service__pb2.NI2576MUXDisconnectAllRequest.SerializeToString,
            hvc__measurement__service__pb2.NI2576MUXDisconnectAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseNI2576MUXSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/CloseNI2576MUXSession',
            hvc__measurement__service__pb2.NI2576MUXCloseSessionRequest.SerializeToString,
            hvc__measurement__service__pb2.NI2576MUXCloseSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetNI2576MUX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/ResetNI2576MUX',
            hvc__measurement__service__pb2.NI2576MUXResetRequest.SerializeToString,
            hvc__measurement__service__pb2.NI2576MUXResetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
