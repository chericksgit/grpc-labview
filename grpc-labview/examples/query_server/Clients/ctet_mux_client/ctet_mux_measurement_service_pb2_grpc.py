# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ctet_mux_measurement_service_pb2 as ctet__mux__measurement__service__pb2


class MeasurementServiceStub(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Invoke = channel.unary_unary(
                '/measurementservice.MeasurementService/Invoke',
                request_serializer=ctet__mux__measurement__service__pb2.InvokeRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.InvokeResponse.FromString,
                )
        self.Query = channel.unary_unary(
                '/measurementservice.MeasurementService/Query',
                request_serializer=ctet__mux__measurement__service__pb2.QueryRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.QueryResponse.FromString,
                )
        self.Register = channel.unary_stream(
                '/measurementservice.MeasurementService/Register',
                request_serializer=ctet__mux__measurement__service__pb2.RegistrationRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.ServerEvent.FromString,
                )
        self.OpenMUXSession = channel.unary_unary(
                '/measurementservice.MeasurementService/OpenMUXSession',
                request_serializer=ctet__mux__measurement__service__pb2.MUXOpenSessionRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.MUXOpenSessionResponse.FromString,
                )
        self.CloseMUXSession = channel.unary_unary(
                '/measurementservice.MeasurementService/CloseMUXSession',
                request_serializer=ctet__mux__measurement__service__pb2.MUXCloseSessionRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.MUXCloseSessionResponse.FromString,
                )
        self.OpenMUXChannel = channel.unary_unary(
                '/measurementservice.MeasurementService/OpenMUXChannel',
                request_serializer=ctet__mux__measurement__service__pb2.MUXOpenChannelRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.MUXOpenChannelResponse.FromString,
                )
        self.CloseMUXChannel = channel.unary_unary(
                '/measurementservice.MeasurementService/CloseMUXChannel',
                request_serializer=ctet__mux__measurement__service__pb2.MUXCloseChannelRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.MUXCloseChannelResponse.FromString,
                )
        self.OpenMUXRelay = channel.unary_unary(
                '/measurementservice.MeasurementService/OpenMUXRelay',
                request_serializer=ctet__mux__measurement__service__pb2.MUXOpenRelayRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.MUXOpenRelayResponse.FromString,
                )
        self.CloseMUXRelay = channel.unary_unary(
                '/measurementservice.MeasurementService/CloseMUXRelay',
                request_serializer=ctet__mux__measurement__service__pb2.MUXCloseRelayRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.MUXCloseRelayResponse.FromString,
                )
        self.CloseMUXAllRelays = channel.unary_unary(
                '/measurementservice.MeasurementService/CloseMUXAllRelays',
                request_serializer=ctet__mux__measurement__service__pb2.MUXCloseAllRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.MUXCloseAllResponse.FromString,
                )
        self.DisconnectAllMUXChannels = channel.unary_unary(
                '/measurementservice.MeasurementService/DisconnectAllMUXChannels',
                request_serializer=ctet__mux__measurement__service__pb2.MUXDisconnectAllRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.MUXDisconnectAllResponse.FromString,
                )
        self.ResetMUX = channel.unary_unary(
                '/measurementservice.MeasurementService/ResetMUX',
                request_serializer=ctet__mux__measurement__service__pb2.MUXResetRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.MUXResetResponse.FromString,
                )
        self.GetMUXStatus = channel.unary_unary(
                '/measurementservice.MeasurementService/GetMUXStatus',
                request_serializer=ctet__mux__measurement__service__pb2.MUXGetStatusRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.MUXGetStatusResponse.FromString,
                )
        self.GetMUXChannelNames = channel.unary_unary(
                '/measurementservice.MeasurementService/GetMUXChannelNames',
                request_serializer=ctet__mux__measurement__service__pb2.MUXGetChannelNamesRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.MUXGetChannelNamesResponse.FromString,
                )
        self.GetMUXRelayInfo = channel.unary_unary(
                '/measurementservice.MeasurementService/GetMUXRelayInfo',
                request_serializer=ctet__mux__measurement__service__pb2.MUXGetRelayInfoRequest.SerializeToString,
                response_deserializer=ctet__mux__measurement__service__pb2.MUXGetRelayInfoResponse.FromString,
                )


class MeasurementServiceServicer(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    def Invoke(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenMUXSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseMUXSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenMUXChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseMUXChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenMUXRelay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseMUXRelay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseMUXAllRelays(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisconnectAllMUXChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetMUX(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMUXStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMUXChannelNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMUXRelayInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeasurementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Invoke': grpc.unary_unary_rpc_method_handler(
                    servicer.Invoke,
                    request_deserializer=ctet__mux__measurement__service__pb2.InvokeRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.InvokeResponse.SerializeToString,
            ),
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=ctet__mux__measurement__service__pb2.QueryRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.QueryResponse.SerializeToString,
            ),
            'Register': grpc.unary_stream_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=ctet__mux__measurement__service__pb2.RegistrationRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.ServerEvent.SerializeToString,
            ),
            'OpenMUXSession': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenMUXSession,
                    request_deserializer=ctet__mux__measurement__service__pb2.MUXOpenSessionRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.MUXOpenSessionResponse.SerializeToString,
            ),
            'CloseMUXSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseMUXSession,
                    request_deserializer=ctet__mux__measurement__service__pb2.MUXCloseSessionRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.MUXCloseSessionResponse.SerializeToString,
            ),
            'OpenMUXChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenMUXChannel,
                    request_deserializer=ctet__mux__measurement__service__pb2.MUXOpenChannelRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.MUXOpenChannelResponse.SerializeToString,
            ),
            'CloseMUXChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseMUXChannel,
                    request_deserializer=ctet__mux__measurement__service__pb2.MUXCloseChannelRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.MUXCloseChannelResponse.SerializeToString,
            ),
            'OpenMUXRelay': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenMUXRelay,
                    request_deserializer=ctet__mux__measurement__service__pb2.MUXOpenRelayRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.MUXOpenRelayResponse.SerializeToString,
            ),
            'CloseMUXRelay': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseMUXRelay,
                    request_deserializer=ctet__mux__measurement__service__pb2.MUXCloseRelayRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.MUXCloseRelayResponse.SerializeToString,
            ),
            'CloseMUXAllRelays': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseMUXAllRelays,
                    request_deserializer=ctet__mux__measurement__service__pb2.MUXCloseAllRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.MUXCloseAllResponse.SerializeToString,
            ),
            'DisconnectAllMUXChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.DisconnectAllMUXChannels,
                    request_deserializer=ctet__mux__measurement__service__pb2.MUXDisconnectAllRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.MUXDisconnectAllResponse.SerializeToString,
            ),
            'ResetMUX': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetMUX,
                    request_deserializer=ctet__mux__measurement__service__pb2.MUXResetRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.MUXResetResponse.SerializeToString,
            ),
            'GetMUXStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMUXStatus,
                    request_deserializer=ctet__mux__measurement__service__pb2.MUXGetStatusRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.MUXGetStatusResponse.SerializeToString,
            ),
            'GetMUXChannelNames': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMUXChannelNames,
                    request_deserializer=ctet__mux__measurement__service__pb2.MUXGetChannelNamesRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.MUXGetChannelNamesResponse.SerializeToString,
            ),
            'GetMUXRelayInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMUXRelayInfo,
                    request_deserializer=ctet__mux__measurement__service__pb2.MUXGetRelayInfoRequest.FromString,
                    response_serializer=ctet__mux__measurement__service__pb2.MUXGetRelayInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'measurementservice.MeasurementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MeasurementService(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    @staticmethod
    def Invoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/Invoke',
            ctet__mux__measurement__service__pb2.InvokeRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.InvokeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/Query',
            ctet__mux__measurement__service__pb2.QueryRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/measurementservice.MeasurementService/Register',
            ctet__mux__measurement__service__pb2.RegistrationRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.ServerEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenMUXSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/OpenMUXSession',
            ctet__mux__measurement__service__pb2.MUXOpenSessionRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.MUXOpenSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseMUXSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/CloseMUXSession',
            ctet__mux__measurement__service__pb2.MUXCloseSessionRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.MUXCloseSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenMUXChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/OpenMUXChannel',
            ctet__mux__measurement__service__pb2.MUXOpenChannelRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.MUXOpenChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseMUXChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/CloseMUXChannel',
            ctet__mux__measurement__service__pb2.MUXCloseChannelRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.MUXCloseChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenMUXRelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/OpenMUXRelay',
            ctet__mux__measurement__service__pb2.MUXOpenRelayRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.MUXOpenRelayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseMUXRelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/CloseMUXRelay',
            ctet__mux__measurement__service__pb2.MUXCloseRelayRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.MUXCloseRelayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseMUXAllRelays(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/CloseMUXAllRelays',
            ctet__mux__measurement__service__pb2.MUXCloseAllRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.MUXCloseAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisconnectAllMUXChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/DisconnectAllMUXChannels',
            ctet__mux__measurement__service__pb2.MUXDisconnectAllRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.MUXDisconnectAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetMUX(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/ResetMUX',
            ctet__mux__measurement__service__pb2.MUXResetRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.MUXResetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMUXStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/GetMUXStatus',
            ctet__mux__measurement__service__pb2.MUXGetStatusRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.MUXGetStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMUXChannelNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/GetMUXChannelNames',
            ctet__mux__measurement__service__pb2.MUXGetChannelNamesRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.MUXGetChannelNamesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMUXRelayInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/GetMUXRelayInfo',
            ctet__mux__measurement__service__pb2.MUXGetRelayInfoRequest.SerializeToString,
            ctet__mux__measurement__service__pb2.MUXGetRelayInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
