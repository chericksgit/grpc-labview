# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ctet_dmm_measurement_service_pb2 as ctet__dmm__measurement__service__pb2


class MeasurementServiceStub(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Invoke = channel.unary_unary(
                '/measurementservice.MeasurementService/Invoke',
                request_serializer=ctet__dmm__measurement__service__pb2.InvokeRequest.SerializeToString,
                response_deserializer=ctet__dmm__measurement__service__pb2.InvokeResponse.FromString,
                )
        self.Query = channel.unary_unary(
                '/measurementservice.MeasurementService/Query',
                request_serializer=ctet__dmm__measurement__service__pb2.QueryRequest.SerializeToString,
                response_deserializer=ctet__dmm__measurement__service__pb2.QueryResponse.FromString,
                )
        self.Register = channel.unary_stream(
                '/measurementservice.MeasurementService/Register',
                request_serializer=ctet__dmm__measurement__service__pb2.RegistrationRequest.SerializeToString,
                response_deserializer=ctet__dmm__measurement__service__pb2.ServerEvent.FromString,
                )
        self.OpenDMMSession = channel.unary_unary(
                '/measurementservice.MeasurementService/OpenDMMSession',
                request_serializer=ctet__dmm__measurement__service__pb2.DMMOpenSessionRequest.SerializeToString,
                response_deserializer=ctet__dmm__measurement__service__pb2.DMMOpenSessionResponse.FromString,
                )
        self.ConfigureDMM = channel.unary_unary(
                '/measurementservice.MeasurementService/ConfigureDMM',
                request_serializer=ctet__dmm__measurement__service__pb2.DMMConfigRequest.SerializeToString,
                response_deserializer=ctet__dmm__measurement__service__pb2.DMMConfigResponse.FromString,
                )
        self.PerformDMMMeasurement = channel.unary_unary(
                '/measurementservice.MeasurementService/PerformDMMMeasurement',
                request_serializer=ctet__dmm__measurement__service__pb2.DMMMeasurementRequest.SerializeToString,
                response_deserializer=ctet__dmm__measurement__service__pb2.DMMMeasurementData.FromString,
                )
        self.CloseDMMSession = channel.unary_unary(
                '/measurementservice.MeasurementService/CloseDMMSession',
                request_serializer=ctet__dmm__measurement__service__pb2.DMMCloseSessionRequest.SerializeToString,
                response_deserializer=ctet__dmm__measurement__service__pb2.DMMCloseSessionResponse.FromString,
                )
        self.SelfCalibrateDMM = channel.unary_unary(
                '/measurementservice.MeasurementService/SelfCalibrateDMM',
                request_serializer=ctet__dmm__measurement__service__pb2.DMMSelfCalRequest.SerializeToString,
                response_deserializer=ctet__dmm__measurement__service__pb2.DMMSelfCalResponse.FromString,
                )
        self.ResetDMM = channel.unary_unary(
                '/measurementservice.MeasurementService/ResetDMM',
                request_serializer=ctet__dmm__measurement__service__pb2.DMMResetRequest.SerializeToString,
                response_deserializer=ctet__dmm__measurement__service__pb2.DMMResetResponse.FromString,
                )
        self.GetDMMLastExtCalInfo = channel.unary_unary(
                '/measurementservice.MeasurementService/GetDMMLastExtCalInfo',
                request_serializer=ctet__dmm__measurement__service__pb2.DMMLastExtCalInfoRequest.SerializeToString,
                response_deserializer=ctet__dmm__measurement__service__pb2.DMMLastExtCalInfoResponse.FromString,
                )
        self.GetDMMLastSelfCalInfo = channel.unary_unary(
                '/measurementservice.MeasurementService/GetDMMLastSelfCalInfo',
                request_serializer=ctet__dmm__measurement__service__pb2.DMMLastSelfCalInfoRequest.SerializeToString,
                response_deserializer=ctet__dmm__measurement__service__pb2.DMMLastSelfCalInfoResponse.FromString,
                )


class MeasurementServiceServicer(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    def Invoke(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenDMMSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDMM(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformDMMMeasurement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseDMMSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelfCalibrateDMM(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetDMM(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDMMLastExtCalInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDMMLastSelfCalInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeasurementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Invoke': grpc.unary_unary_rpc_method_handler(
                    servicer.Invoke,
                    request_deserializer=ctet__dmm__measurement__service__pb2.InvokeRequest.FromString,
                    response_serializer=ctet__dmm__measurement__service__pb2.InvokeResponse.SerializeToString,
            ),
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=ctet__dmm__measurement__service__pb2.QueryRequest.FromString,
                    response_serializer=ctet__dmm__measurement__service__pb2.QueryResponse.SerializeToString,
            ),
            'Register': grpc.unary_stream_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=ctet__dmm__measurement__service__pb2.RegistrationRequest.FromString,
                    response_serializer=ctet__dmm__measurement__service__pb2.ServerEvent.SerializeToString,
            ),
            'OpenDMMSession': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenDMMSession,
                    request_deserializer=ctet__dmm__measurement__service__pb2.DMMOpenSessionRequest.FromString,
                    response_serializer=ctet__dmm__measurement__service__pb2.DMMOpenSessionResponse.SerializeToString,
            ),
            'ConfigureDMM': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDMM,
                    request_deserializer=ctet__dmm__measurement__service__pb2.DMMConfigRequest.FromString,
                    response_serializer=ctet__dmm__measurement__service__pb2.DMMConfigResponse.SerializeToString,
            ),
            'PerformDMMMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformDMMMeasurement,
                    request_deserializer=ctet__dmm__measurement__service__pb2.DMMMeasurementRequest.FromString,
                    response_serializer=ctet__dmm__measurement__service__pb2.DMMMeasurementData.SerializeToString,
            ),
            'CloseDMMSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseDMMSession,
                    request_deserializer=ctet__dmm__measurement__service__pb2.DMMCloseSessionRequest.FromString,
                    response_serializer=ctet__dmm__measurement__service__pb2.DMMCloseSessionResponse.SerializeToString,
            ),
            'SelfCalibrateDMM': grpc.unary_unary_rpc_method_handler(
                    servicer.SelfCalibrateDMM,
                    request_deserializer=ctet__dmm__measurement__service__pb2.DMMSelfCalRequest.FromString,
                    response_serializer=ctet__dmm__measurement__service__pb2.DMMSelfCalResponse.SerializeToString,
            ),
            'ResetDMM': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetDMM,
                    request_deserializer=ctet__dmm__measurement__service__pb2.DMMResetRequest.FromString,
                    response_serializer=ctet__dmm__measurement__service__pb2.DMMResetResponse.SerializeToString,
            ),
            'GetDMMLastExtCalInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDMMLastExtCalInfo,
                    request_deserializer=ctet__dmm__measurement__service__pb2.DMMLastExtCalInfoRequest.FromString,
                    response_serializer=ctet__dmm__measurement__service__pb2.DMMLastExtCalInfoResponse.SerializeToString,
            ),
            'GetDMMLastSelfCalInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDMMLastSelfCalInfo,
                    request_deserializer=ctet__dmm__measurement__service__pb2.DMMLastSelfCalInfoRequest.FromString,
                    response_serializer=ctet__dmm__measurement__service__pb2.DMMLastSelfCalInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'measurementservice.MeasurementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MeasurementService(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    @staticmethod
    def Invoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/Invoke',
            ctet__dmm__measurement__service__pb2.InvokeRequest.SerializeToString,
            ctet__dmm__measurement__service__pb2.InvokeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/Query',
            ctet__dmm__measurement__service__pb2.QueryRequest.SerializeToString,
            ctet__dmm__measurement__service__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/measurementservice.MeasurementService/Register',
            ctet__dmm__measurement__service__pb2.RegistrationRequest.SerializeToString,
            ctet__dmm__measurement__service__pb2.ServerEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenDMMSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/OpenDMMSession',
            ctet__dmm__measurement__service__pb2.DMMOpenSessionRequest.SerializeToString,
            ctet__dmm__measurement__service__pb2.DMMOpenSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDMM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/ConfigureDMM',
            ctet__dmm__measurement__service__pb2.DMMConfigRequest.SerializeToString,
            ctet__dmm__measurement__service__pb2.DMMConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformDMMMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/PerformDMMMeasurement',
            ctet__dmm__measurement__service__pb2.DMMMeasurementRequest.SerializeToString,
            ctet__dmm__measurement__service__pb2.DMMMeasurementData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseDMMSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/CloseDMMSession',
            ctet__dmm__measurement__service__pb2.DMMCloseSessionRequest.SerializeToString,
            ctet__dmm__measurement__service__pb2.DMMCloseSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelfCalibrateDMM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/SelfCalibrateDMM',
            ctet__dmm__measurement__service__pb2.DMMSelfCalRequest.SerializeToString,
            ctet__dmm__measurement__service__pb2.DMMSelfCalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetDMM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/ResetDMM',
            ctet__dmm__measurement__service__pb2.DMMResetRequest.SerializeToString,
            ctet__dmm__measurement__service__pb2.DMMResetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDMMLastExtCalInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/GetDMMLastExtCalInfo',
            ctet__dmm__measurement__service__pb2.DMMLastExtCalInfoRequest.SerializeToString,
            ctet__dmm__measurement__service__pb2.DMMLastExtCalInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDMMLastSelfCalInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/GetDMMLastSelfCalInfo',
            ctet__dmm__measurement__service__pb2.DMMLastSelfCalInfoRequest.SerializeToString,
            ctet__dmm__measurement__service__pb2.DMMLastSelfCalInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
