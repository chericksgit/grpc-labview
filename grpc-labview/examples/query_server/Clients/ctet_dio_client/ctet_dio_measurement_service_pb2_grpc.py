# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ctet_dio_measurement_service_pb2 as ctet__dio__measurement__service__pb2


class MeasurementServiceStub(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Invoke = channel.unary_unary(
                '/measurementservice.MeasurementService/Invoke',
                request_serializer=ctet__dio__measurement__service__pb2.InvokeRequest.SerializeToString,
                response_deserializer=ctet__dio__measurement__service__pb2.InvokeResponse.FromString,
                )
        self.Query = channel.unary_unary(
                '/measurementservice.MeasurementService/Query',
                request_serializer=ctet__dio__measurement__service__pb2.QueryRequest.SerializeToString,
                response_deserializer=ctet__dio__measurement__service__pb2.QueryResponse.FromString,
                )
        self.Register = channel.unary_stream(
                '/measurementservice.MeasurementService/Register',
                request_serializer=ctet__dio__measurement__service__pb2.RegistrationRequest.SerializeToString,
                response_deserializer=ctet__dio__measurement__service__pb2.ServerEvent.FromString,
                )
        self.OpenDISession = channel.unary_unary(
                '/measurementservice.MeasurementService/OpenDISession',
                request_serializer=ctet__dio__measurement__service__pb2.DIOpenSessionRequest.SerializeToString,
                response_deserializer=ctet__dio__measurement__service__pb2.DIOpenSessionResponse.FromString,
                )
        self.OpenDOSession = channel.unary_unary(
                '/measurementservice.MeasurementService/OpenDOSession',
                request_serializer=ctet__dio__measurement__service__pb2.DOOpenSessionRequest.SerializeToString,
                response_deserializer=ctet__dio__measurement__service__pb2.DOOpenSessionResponse.FromString,
                )
        self.ReadDI = channel.unary_stream(
                '/measurementservice.MeasurementService/ReadDI',
                request_serializer=ctet__dio__measurement__service__pb2.ReadDIRequest.SerializeToString,
                response_deserializer=ctet__dio__measurement__service__pb2.ReadDIResponse.FromString,
                )
        self.StopDI = channel.unary_unary(
                '/measurementservice.MeasurementService/StopDI',
                request_serializer=ctet__dio__measurement__service__pb2.StopDIRequest.SerializeToString,
                response_deserializer=ctet__dio__measurement__service__pb2.StopDIResponse.FromString,
                )
        self.WriteDO = channel.unary_unary(
                '/measurementservice.MeasurementService/WriteDO',
                request_serializer=ctet__dio__measurement__service__pb2.WriteDORequest.SerializeToString,
                response_deserializer=ctet__dio__measurement__service__pb2.WriteDOResponse.FromString,
                )
        self.CloseDISession = channel.unary_unary(
                '/measurementservice.MeasurementService/CloseDISession',
                request_serializer=ctet__dio__measurement__service__pb2.DICloseSessionRequest.SerializeToString,
                response_deserializer=ctet__dio__measurement__service__pb2.DICloseSessionResponse.FromString,
                )
        self.CloseDOSession = channel.unary_unary(
                '/measurementservice.MeasurementService/CloseDOSession',
                request_serializer=ctet__dio__measurement__service__pb2.DOCloseSessionRequest.SerializeToString,
                response_deserializer=ctet__dio__measurement__service__pb2.DOCloseSessionResponse.FromString,
                )


class MeasurementServiceServicer(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    def Invoke(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenDISession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenDOSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadDI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopDI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteDO(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseDISession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseDOSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeasurementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Invoke': grpc.unary_unary_rpc_method_handler(
                    servicer.Invoke,
                    request_deserializer=ctet__dio__measurement__service__pb2.InvokeRequest.FromString,
                    response_serializer=ctet__dio__measurement__service__pb2.InvokeResponse.SerializeToString,
            ),
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=ctet__dio__measurement__service__pb2.QueryRequest.FromString,
                    response_serializer=ctet__dio__measurement__service__pb2.QueryResponse.SerializeToString,
            ),
            'Register': grpc.unary_stream_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=ctet__dio__measurement__service__pb2.RegistrationRequest.FromString,
                    response_serializer=ctet__dio__measurement__service__pb2.ServerEvent.SerializeToString,
            ),
            'OpenDISession': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenDISession,
                    request_deserializer=ctet__dio__measurement__service__pb2.DIOpenSessionRequest.FromString,
                    response_serializer=ctet__dio__measurement__service__pb2.DIOpenSessionResponse.SerializeToString,
            ),
            'OpenDOSession': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenDOSession,
                    request_deserializer=ctet__dio__measurement__service__pb2.DOOpenSessionRequest.FromString,
                    response_serializer=ctet__dio__measurement__service__pb2.DOOpenSessionResponse.SerializeToString,
            ),
            'ReadDI': grpc.unary_stream_rpc_method_handler(
                    servicer.ReadDI,
                    request_deserializer=ctet__dio__measurement__service__pb2.ReadDIRequest.FromString,
                    response_serializer=ctet__dio__measurement__service__pb2.ReadDIResponse.SerializeToString,
            ),
            'StopDI': grpc.unary_unary_rpc_method_handler(
                    servicer.StopDI,
                    request_deserializer=ctet__dio__measurement__service__pb2.StopDIRequest.FromString,
                    response_serializer=ctet__dio__measurement__service__pb2.StopDIResponse.SerializeToString,
            ),
            'WriteDO': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteDO,
                    request_deserializer=ctet__dio__measurement__service__pb2.WriteDORequest.FromString,
                    response_serializer=ctet__dio__measurement__service__pb2.WriteDOResponse.SerializeToString,
            ),
            'CloseDISession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseDISession,
                    request_deserializer=ctet__dio__measurement__service__pb2.DICloseSessionRequest.FromString,
                    response_serializer=ctet__dio__measurement__service__pb2.DICloseSessionResponse.SerializeToString,
            ),
            'CloseDOSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseDOSession,
                    request_deserializer=ctet__dio__measurement__service__pb2.DOCloseSessionRequest.FromString,
                    response_serializer=ctet__dio__measurement__service__pb2.DOCloseSessionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'measurementservice.MeasurementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MeasurementService(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    @staticmethod
    def Invoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/Invoke',
            ctet__dio__measurement__service__pb2.InvokeRequest.SerializeToString,
            ctet__dio__measurement__service__pb2.InvokeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/Query',
            ctet__dio__measurement__service__pb2.QueryRequest.SerializeToString,
            ctet__dio__measurement__service__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/measurementservice.MeasurementService/Register',
            ctet__dio__measurement__service__pb2.RegistrationRequest.SerializeToString,
            ctet__dio__measurement__service__pb2.ServerEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenDISession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/OpenDISession',
            ctet__dio__measurement__service__pb2.DIOpenSessionRequest.SerializeToString,
            ctet__dio__measurement__service__pb2.DIOpenSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenDOSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/OpenDOSession',
            ctet__dio__measurement__service__pb2.DOOpenSessionRequest.SerializeToString,
            ctet__dio__measurement__service__pb2.DOOpenSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadDI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/measurementservice.MeasurementService/ReadDI',
            ctet__dio__measurement__service__pb2.ReadDIRequest.SerializeToString,
            ctet__dio__measurement__service__pb2.ReadDIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopDI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/StopDI',
            ctet__dio__measurement__service__pb2.StopDIRequest.SerializeToString,
            ctet__dio__measurement__service__pb2.StopDIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteDO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/WriteDO',
            ctet__dio__measurement__service__pb2.WriteDORequest.SerializeToString,
            ctet__dio__measurement__service__pb2.WriteDOResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseDISession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/CloseDISession',
            ctet__dio__measurement__service__pb2.DICloseSessionRequest.SerializeToString,
            ctet__dio__measurement__service__pb2.DICloseSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseDOSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/CloseDOSession',
            ctet__dio__measurement__service__pb2.DOCloseSessionRequest.SerializeToString,
            ctet__dio__measurement__service__pb2.DOCloseSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
