# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import measurement_service_old3_pb2 as measurement__service__old3__pb2


class MeasurementServiceStub(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Invoke = channel.unary_unary(
                '/measurementservice.MeasurementService/Invoke',
                request_serializer=measurement__service__old3__pb2.InvokeRequest.SerializeToString,
                response_deserializer=measurement__service__old3__pb2.InvokeResponse.FromString,
                )
        self.Query = channel.unary_unary(
                '/measurementservice.MeasurementService/Query',
                request_serializer=measurement__service__old3__pb2.QueryRequest.SerializeToString,
                response_deserializer=measurement__service__old3__pb2.QueryResponse.FromString,
                )
        self.PerformOCVMeasurement = channel.unary_unary(
                '/measurementservice.MeasurementService/PerformOCVMeasurement',
                request_serializer=measurement__service__old3__pb2.OCVRequest.SerializeToString,
                response_deserializer=measurement__service__old3__pb2.OCVData.FromString,
                )
        self.PerformACIRMeasurement = channel.unary_unary(
                '/measurementservice.MeasurementService/PerformACIRMeasurement',
                request_serializer=measurement__service__old3__pb2.ACIRRequest.SerializeToString,
                response_deserializer=measurement__service__old3__pb2.ACIRData.FromString,
                )
        self.StreamOCVMeasurement = channel.unary_stream(
                '/measurementservice.MeasurementService/StreamOCVMeasurement',
                request_serializer=measurement__service__old3__pb2.OCVRequest.SerializeToString,
                response_deserializer=measurement__service__old3__pb2.OCVRaw.FromString,
                )
        self.Register = channel.unary_stream(
                '/measurementservice.MeasurementService/Register',
                request_serializer=measurement__service__old3__pb2.RegistrationRequest.SerializeToString,
                response_deserializer=measurement__service__old3__pb2.ServerEvent.FromString,
                )


class MeasurementServiceServicer(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    def Invoke(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformOCVMeasurement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformACIRMeasurement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamOCVMeasurement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeasurementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Invoke': grpc.unary_unary_rpc_method_handler(
                    servicer.Invoke,
                    request_deserializer=measurement__service__old3__pb2.InvokeRequest.FromString,
                    response_serializer=measurement__service__old3__pb2.InvokeResponse.SerializeToString,
            ),
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=measurement__service__old3__pb2.QueryRequest.FromString,
                    response_serializer=measurement__service__old3__pb2.QueryResponse.SerializeToString,
            ),
            'PerformOCVMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformOCVMeasurement,
                    request_deserializer=measurement__service__old3__pb2.OCVRequest.FromString,
                    response_serializer=measurement__service__old3__pb2.OCVData.SerializeToString,
            ),
            'PerformACIRMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformACIRMeasurement,
                    request_deserializer=measurement__service__old3__pb2.ACIRRequest.FromString,
                    response_serializer=measurement__service__old3__pb2.ACIRData.SerializeToString,
            ),
            'StreamOCVMeasurement': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamOCVMeasurement,
                    request_deserializer=measurement__service__old3__pb2.OCVRequest.FromString,
                    response_serializer=measurement__service__old3__pb2.OCVRaw.SerializeToString,
            ),
            'Register': grpc.unary_stream_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=measurement__service__old3__pb2.RegistrationRequest.FromString,
                    response_serializer=measurement__service__old3__pb2.ServerEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'measurementservice.MeasurementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MeasurementService(object):
    """---------------------------------------------------------------------
    The MeasurementService service definition.
    ---------------------------------------------------------------------
    """

    @staticmethod
    def Invoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/Invoke',
            measurement__service__old3__pb2.InvokeRequest.SerializeToString,
            measurement__service__old3__pb2.InvokeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/Query',
            measurement__service__old3__pb2.QueryRequest.SerializeToString,
            measurement__service__old3__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformOCVMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/PerformOCVMeasurement',
            measurement__service__old3__pb2.OCVRequest.SerializeToString,
            measurement__service__old3__pb2.OCVData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformACIRMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/measurementservice.MeasurementService/PerformACIRMeasurement',
            measurement__service__old3__pb2.ACIRRequest.SerializeToString,
            measurement__service__old3__pb2.ACIRData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamOCVMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/measurementservice.MeasurementService/StreamOCVMeasurement',
            measurement__service__old3__pb2.OCVRequest.SerializeToString,
            measurement__service__old3__pb2.OCVRaw.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/measurementservice.MeasurementService/Register',
            measurement__service__old3__pb2.RegistrationRequest.SerializeToString,
            measurement__service__old3__pb2.ServerEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
